// <auto-generated />
using System;
using CoffeeAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoffeeAPI.Migrations
{
    [DbContext(typeof(CoffeeContext))]
    [Migration("20181217133713_groups")]
    partial class groups
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoffeeAPI.Models.Drink", b =>
                {
                    b.Property<Guid>("DrinkId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Additions");

                    b.Property<bool>("Available");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("drinkName")
                        .IsRequired();

                    b.HasKey("DrinkId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new { DrinkId = new Guid("402b4dce-ceb4-4946-b2ef-bd95754f145d"), Additions = true, Available = true, ImageUrl = "/assets/Images/Koffie.jpg", drinkName = "Koffie" },
                        new { DrinkId = new Guid("4dcbb469-6728-43a7-8f38-89703e7d7f86"), Additions = true, Available = true, ImageUrl = "/assets/Images/Cappuccino.jpg", drinkName = "Cappuccino" },
                        new { DrinkId = new Guid("4c8f4ae1-7d2c-43f7-9012-70396c1abe4a"), Additions = true, Available = true, ImageUrl = "/assets/Images/Latte Macchiato.jpg", drinkName = "Latte Macchiato" },
                        new { DrinkId = new Guid("4a54b9fa-9416-4ccf-ada3-2fa3d4efff09"), Additions = true, Available = true, ImageUrl = "/assets/Images/Espresso.png", drinkName = "Espresso" },
                        new { DrinkId = new Guid("1ade50f6-ead9-4faa-9b02-a3e1aac67868"), Additions = true, Available = true, ImageUrl = "/assets/Images/Thee.jpg", drinkName = "Thee" },
                        new { DrinkId = new Guid("2dfde6e9-a0d5-4786-9866-7a25ffb0d7a7"), Additions = false, Available = true, ImageUrl = "/assets/Images/Water.jpg", drinkName = "Water" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.DrinkPreference", b =>
                {
                    b.Property<Guid>("PreferenceId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DrinkId");

                    b.Property<int?>("Milk");

                    b.Property<int?>("Sugar");

                    b.Property<Guid>("UserId");

                    b.HasKey("PreferenceId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("UserId");

                    b.ToTable("DrinkPreference");

                    b.HasData(
                        new { PreferenceId = new Guid("6cc8c0cd-cedc-4804-8d08-2d4b636e5098"), UserId = new Guid("b8bf48b9-d3ae-4bf6-b911-a469b860b0b8") },
                        new { PreferenceId = new Guid("7acac077-0944-44d8-b019-17ef13431e92"), UserId = new Guid("694834ee-2367-48c6-85b0-cbb12d73640f") },
                        new { PreferenceId = new Guid("e5a3b1c1-d873-4ac2-8cf7-4fc099c794cc"), UserId = new Guid("238d4e80-bd0d-46b8-b873-e3b16a08f787") }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GroupName")
                        .IsRequired();

                    b.HasKey("GroupId");

                    b.ToTable("Groups");

                    b.HasData(
                        new { GroupId = new Guid("fa7f1175-5c09-470b-8013-1e8d2d953581"), GroupName = "Awesome" },
                        new { GroupId = new Guid("f3d29542-83cf-40f5-9fc6-16b38cb02c79"), GroupName = "The addicts" },
                        new { GroupId = new Guid("cd756d30-22fb-4b08-8bdf-a587777c5b55"), GroupName = "The most drinkers" },
                        new { GroupId = new Guid("ffb936c7-9e60-4bfc-9567-379b7cf8a518"), GroupName = "Frequently need coffee" },
                        new { GroupId = new Guid("234221d9-9f19-48e8-943e-9078b854e7f2"), GroupName = "Thee pussy's" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.Login", b =>
                {
                    b.Property<Guid>("LoginId")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<Guid?>("UserId");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("LoginId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Logins");

                    b.HasData(
                        new { LoginId = new Guid("e63b6e0a-36f8-447d-9c17-755a5a440e9a"), PasswordHash = new byte[] { 149, 143, 18, 169, 175, 131, 128, 35, 189, 71, 36, 25, 254, 47, 131, 179, 12, 77, 188, 57, 80, 55, 131, 121, 249, 11, 43, 254, 195, 102, 86, 204 }, PasswordSalt = new byte[] { 135, 119, 12, 96, 50, 202, 60, 123, 86, 169, 239, 30, 37, 156, 40, 34, 85, 194, 251, 168, 233, 188, 70, 42, 53, 238, 163, 52, 230, 67, 135, 161 }, UserId = new Guid("b8bf48b9-d3ae-4bf6-b911-a469b860b0b8"), UserName = "admin" },
                        new { LoginId = new Guid("69443dae-2dfa-4cb5-8027-73b06f60ee9e"), PasswordHash = new byte[] { 230, 119, 237, 226, 228, 3, 26, 130, 119, 245, 104, 86, 76, 110, 193, 107, 37, 118, 0, 235, 127, 182, 45, 34, 84, 222, 35, 63, 58, 80, 95, 210 }, PasswordSalt = new byte[] { 149, 95, 22, 200, 67, 62, 77, 75, 234, 107, 37, 76, 140, 240, 134, 33, 142, 139, 165, 167, 171, 28, 179, 127, 42, 165, 49, 16, 163, 59, 31, 231 }, UserId = new Guid("694834ee-2367-48c6-85b0-cbb12d73640f"), UserName = "jaap" },
                        new { LoginId = new Guid("e5242a9e-3724-4558-bcc0-6e2346286e7a"), PasswordHash = new byte[] { 148, 181, 123, 75, 200, 76, 126, 163, 165, 2, 110, 107, 94, 223, 251, 42, 61, 157, 68, 119, 152, 212, 9, 23, 98, 60, 219, 27, 172, 163, 174, 8 }, PasswordSalt = new byte[] { 186, 22, 153, 112, 10, 85, 151, 92, 53, 90, 7, 17, 80, 59, 149, 22, 228, 82, 48, 238, 231, 67, 148, 70, 30, 134, 141, 210, 198, 33, 28, 186 }, UserId = new Guid("238d4e80-bd0d-46b8-b873-e3b16a08f787"), UserName = "drie" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.OrderLine", b =>
                {
                    b.Property<Guid>("OrderLineId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<Guid>("CustomerUserId");

                    b.Property<Guid>("DrinkId");

                    b.Property<DateTime>("GetTime");

                    b.Property<int>("Milk");

                    b.Property<Guid?>("OrderStatusId");

                    b.Property<DateTime>("OrderTime");

                    b.Property<Guid?>("ServerUserId");

                    b.Property<int>("Sugar");

                    b.HasKey("OrderLineId");

                    b.HasIndex("CustomerUserId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("ServerUserId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("CoffeeAPI.Models.OrderStatus", b =>
                {
                    b.Property<Guid>("OrderStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StatusName")
                        .IsRequired();

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new { OrderStatusId = new Guid("83311af4-b363-4f40-95c3-3d558c767ceb"), StatusName = "Ordered" },
                        new { OrderStatusId = new Guid("7f8257ad-83da-4acb-8153-6c4d6aab4b91"), StatusName = "Finished" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleName")
                        .IsRequired();

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new { RoleId = new Guid("803efa28-17b5-4cf5-9171-3e8e17880769"), RoleName = "User" },
                        new { RoleId = new Guid("37af3ed8-1067-4221-aea0-0be30be34313"), RoleName = "Manager" },
                        new { RoleId = new Guid("3b1e0fe0-bd3c-4510-b748-7739bc7ac19b"), RoleName = "Admin" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("FirstName");

                    b.Property<Guid?>("GroupMemberGroupId");

                    b.Property<Guid?>("GroupOwnerGroupId");

                    b.Property<string>("LastName");

                    b.Property<Guid?>("PrefrenceDrinkId");

                    b.HasKey("UserId");

                    b.HasIndex("GroupMemberGroupId");

                    b.HasIndex("GroupOwnerGroupId");

                    b.HasIndex("PrefrenceDrinkId");

                    b.ToTable("Users");

                    b.HasData(
                        new { UserId = new Guid("b8bf48b9-d3ae-4bf6-b911-a469b860b0b8"), Active = true, FirstName = "Super", GroupMemberGroupId = new Guid("fa7f1175-5c09-470b-8013-1e8d2d953581"), GroupOwnerGroupId = new Guid("fa7f1175-5c09-470b-8013-1e8d2d953581"), LastName = "Admin" },
                        new { UserId = new Guid("694834ee-2367-48c6-85b0-cbb12d73640f"), Active = true, FirstName = "Jaap", GroupMemberGroupId = new Guid("fa7f1175-5c09-470b-8013-1e8d2d953581"), LastName = "Schaap" },
                        new { UserId = new Guid("238d4e80-bd0d-46b8-b873-e3b16a08f787"), Active = true, FirstName = "User", LastName = "Drie" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { UserId = new Guid("b8bf48b9-d3ae-4bf6-b911-a469b860b0b8"), RoleId = new Guid("803efa28-17b5-4cf5-9171-3e8e17880769") },
                        new { UserId = new Guid("b8bf48b9-d3ae-4bf6-b911-a469b860b0b8"), RoleId = new Guid("3b1e0fe0-bd3c-4510-b748-7739bc7ac19b") },
                        new { UserId = new Guid("694834ee-2367-48c6-85b0-cbb12d73640f"), RoleId = new Guid("803efa28-17b5-4cf5-9171-3e8e17880769") },
                        new { UserId = new Guid("694834ee-2367-48c6-85b0-cbb12d73640f"), RoleId = new Guid("37af3ed8-1067-4221-aea0-0be30be34313") },
                        new { UserId = new Guid("238d4e80-bd0d-46b8-b873-e3b16a08f787"), RoleId = new Guid("803efa28-17b5-4cf5-9171-3e8e17880769") },
                        new { UserId = new Guid("238d4e80-bd0d-46b8-b873-e3b16a08f787"), RoleId = new Guid("37af3ed8-1067-4221-aea0-0be30be34313") }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.DrinkPreference", b =>
                {
                    b.HasOne("CoffeeAPI.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId");

                    b.HasOne("CoffeeAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoffeeAPI.Models.Login", b =>
                {
                    b.HasOne("CoffeeAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CoffeeAPI.Models.OrderLine", b =>
                {
                    b.HasOne("CoffeeAPI.Models.User", "Customer")
                        .WithMany("OrderLinesOrdered")
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.Drink", "Drink")
                        .WithMany("OrderLines")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.OrderStatus", "OrderStatus")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("CoffeeAPI.Models.User", "Server")
                        .WithMany("OrderLinesServed")
                        .HasForeignKey("ServerUserId");
                });

            modelBuilder.Entity("CoffeeAPI.Models.User", b =>
                {
                    b.HasOne("CoffeeAPI.Models.Group", "GroupMember")
                        .WithMany("Members")
                        .HasForeignKey("GroupMemberGroupId");

                    b.HasOne("CoffeeAPI.Models.Group", "GroupOwner")
                        .WithMany()
                        .HasForeignKey("GroupOwnerGroupId");

                    b.HasOne("CoffeeAPI.Models.Drink", "Prefrence")
                        .WithMany()
                        .HasForeignKey("PrefrenceDrinkId");
                });

            modelBuilder.Entity("CoffeeAPI.Models.UserRole", b =>
                {
                    b.HasOne("CoffeeAPI.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
