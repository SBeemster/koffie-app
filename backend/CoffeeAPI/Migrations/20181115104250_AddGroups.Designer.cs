// <auto-generated />
using System;
using CoffeeAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoffeeAPI.Migrations
{
    [DbContext(typeof(CoffeeContext))]
    [Migration("20181115104250_AddGroups")]
    partial class AddGroups
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoffeeAPI.Models.Drink", b =>
                {
                    b.Property<Guid>("DrinkId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Additions");

                    b.Property<bool>("Available");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("drinkName")
                        .IsRequired();

                    b.HasKey("DrinkId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new { DrinkId = new Guid("4fbc52ac-f258-45f7-a7ba-29143342b713"), Additions = true, Available = true, ImageUrl = "/assets/Images/Koffie.jpg", drinkName = "Koffie" },
                        new { DrinkId = new Guid("893f7066-76ea-4c6d-b03e-abc1154dde3d"), Additions = true, Available = true, ImageUrl = "/assets/Images/Cappuccino.jpg", drinkName = "Cappuccino" },
                        new { DrinkId = new Guid("758b278d-7483-41bb-8c15-969f71fba28f"), Additions = true, Available = true, ImageUrl = "/assets/Images/Latte Macchiato.jpg", drinkName = "Latte Macchiato" },
                        new { DrinkId = new Guid("e22b15fb-9a69-4037-b31f-91a381cb9972"), Additions = true, Available = true, ImageUrl = "/assets/Images/Espresso.png", drinkName = "Espresso" },
                        new { DrinkId = new Guid("41dca43b-4d37-42bb-ae34-baed178df09a"), Additions = true, Available = true, ImageUrl = "/assets/Images/Thee.jpg", drinkName = "Thee" },
                        new { DrinkId = new Guid("34af5d1d-3e22-470e-9f9f-a5ae6d252c7a"), Additions = false, Available = true, ImageUrl = "/assets/Images/Water.jpg", drinkName = "Water" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GroupName")
                        .IsRequired();

                    b.HasKey("GroupId");

                    b.ToTable("Groups");

                    b.HasData(
                        new { GroupId = new Guid("9e7f76c2-2fdf-4f17-a245-f4a78eb37a10"), GroupName = "The addicts" },
                        new { GroupId = new Guid("c6e16df5-e901-444b-8abb-82c3f221e40f"), GroupName = "The most drinkers" },
                        new { GroupId = new Guid("f1d2605f-2b4d-4808-ae16-d99d767a409c"), GroupName = "Frequently need coffee" },
                        new { GroupId = new Guid("ae94aa2a-9453-40de-8409-10f47ec9c9d6"), GroupName = "Thee pussy's" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.Login", b =>
                {
                    b.Property<Guid>("LoginId")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<Guid?>("UserId");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("LoginId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Logins");

                    b.HasData(
                        new { LoginId = new Guid("b1b8e57c-457a-42f5-be39-445056bcfc57"), PasswordHash = new byte[] { 1, 129, 45, 215, 45, 188, 176, 54, 52, 159, 104, 196, 66, 140, 121, 202, 159, 65, 254, 61, 86, 47, 82, 117, 41, 100, 117, 183, 163, 102, 83, 119 }, PasswordSalt = new byte[] { 210, 178, 36, 38, 31, 3, 64, 112, 199, 198, 10, 1, 143, 111, 34, 55, 23, 55, 216, 74, 66, 224, 221, 169, 123, 81, 95, 244, 150, 73, 20, 145 }, UserId = new Guid("4406796c-fe8d-41f0-b521-edbeeecf1bab"), UserName = "admin" },
                        new { LoginId = new Guid("23510a3d-357e-4d3c-81e8-715af567eaa7"), PasswordHash = new byte[] { 50, 219, 250, 253, 186, 66, 3, 12, 74, 111, 173, 36, 175, 69, 127, 188, 189, 12, 76, 21, 15, 74, 144, 57, 153, 229, 193, 254, 52, 102, 126, 16 }, PasswordSalt = new byte[] { 117, 166, 62, 215, 212, 108, 201, 142, 221, 32, 125, 211, 6, 249, 8, 2, 36, 165, 79, 126, 220, 51, 244, 204, 205, 109, 60, 106, 97, 63, 175, 120 }, UserId = new Guid("678052a2-ded1-4809-8452-655c493f35d2"), UserName = "jaap" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.OrderLine", b =>
                {
                    b.Property<Guid>("OrderLineId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<Guid>("CustomerUserId");

                    b.Property<Guid>("DrinkId");

                    b.Property<DateTime>("GetTime");

                    b.Property<int>("Milk");

                    b.Property<Guid?>("OrderStatusId");

                    b.Property<DateTime>("OrderTime");

                    b.Property<Guid?>("ServerUserId");

                    b.Property<int>("Sugar");

                    b.HasKey("OrderLineId");

                    b.HasIndex("CustomerUserId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("ServerUserId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("CoffeeAPI.Models.OrderStatus", b =>
                {
                    b.Property<Guid>("OrderStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StatusName")
                        .IsRequired();

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new { OrderStatusId = new Guid("c19b3826-ecc7-41fa-92ab-27c674afc3f2"), StatusName = "Ordered" },
                        new { OrderStatusId = new Guid("170e0c58-f878-4979-baca-b5273b344a35"), StatusName = "Finished" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleName")
                        .IsRequired();

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new { RoleId = new Guid("6f45a612-8fd5-4b4a-b6c5-4e4c41cc108a"), RoleName = "User" },
                        new { RoleId = new Guid("47479cd3-4d33-4bf9-93c5-1bc523cf8862"), RoleName = "Manager" },
                        new { RoleId = new Guid("84ba19c0-49a0-457e-a84f-695751826f08"), RoleName = "Admin" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<Guid?>("PrefrenceDrinkId");

                    b.HasKey("UserId");

                    b.HasIndex("PrefrenceDrinkId");

                    b.ToTable("Users");

                    b.HasData(
                        new { UserId = new Guid("4406796c-fe8d-41f0-b521-edbeeecf1bab"), Active = true, FirstName = "Super", LastName = "Admin" },
                        new { UserId = new Guid("678052a2-ded1-4809-8452-655c493f35d2"), Active = true, FirstName = "Jaap", LastName = "Schaap" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.UserGroup", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GroupId");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("CoffeeAPI.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { UserId = new Guid("4406796c-fe8d-41f0-b521-edbeeecf1bab"), RoleId = new Guid("6f45a612-8fd5-4b4a-b6c5-4e4c41cc108a") },
                        new { UserId = new Guid("4406796c-fe8d-41f0-b521-edbeeecf1bab"), RoleId = new Guid("84ba19c0-49a0-457e-a84f-695751826f08") },
                        new { UserId = new Guid("678052a2-ded1-4809-8452-655c493f35d2"), RoleId = new Guid("6f45a612-8fd5-4b4a-b6c5-4e4c41cc108a") },
                        new { UserId = new Guid("678052a2-ded1-4809-8452-655c493f35d2"), RoleId = new Guid("47479cd3-4d33-4bf9-93c5-1bc523cf8862") }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.Login", b =>
                {
                    b.HasOne("CoffeeAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CoffeeAPI.Models.OrderLine", b =>
                {
                    b.HasOne("CoffeeAPI.Models.User", "Customer")
                        .WithMany("OrderLinesOrdered")
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.Drink", "Drink")
                        .WithMany("OrderLines")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.OrderStatus", "OrderStatus")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("CoffeeAPI.Models.User", "Server")
                        .WithMany("OrderLinesServed")
                        .HasForeignKey("ServerUserId");
                });

            modelBuilder.Entity("CoffeeAPI.Models.User", b =>
                {
                    b.HasOne("CoffeeAPI.Models.Drink", "Prefrence")
                        .WithMany()
                        .HasForeignKey("PrefrenceDrinkId");
                });

            modelBuilder.Entity("CoffeeAPI.Models.UserGroup", b =>
                {
                    b.HasOne("CoffeeAPI.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoffeeAPI.Models.UserRole", b =>
                {
                    b.HasOne("CoffeeAPI.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
