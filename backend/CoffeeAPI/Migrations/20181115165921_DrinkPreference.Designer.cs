// <auto-generated />
using System;
using CoffeeAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoffeeAPI.Migrations
{
    [DbContext(typeof(CoffeeContext))]
    [Migration("20181115165921_DrinkPreference")]
    partial class DrinkPreference
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoffeeAPI.Models.Drink", b =>
                {
                    b.Property<Guid>("DrinkId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Additions");

                    b.Property<bool>("Available");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("drinkName")
                        .IsRequired();

                    b.HasKey("DrinkId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new { DrinkId = new Guid("7174dab5-2d9f-4471-aeb2-7da26d232e22"), Additions = true, Available = true, ImageUrl = "/assets/Images/Koffie.jpg", drinkName = "Koffie" },
                        new { DrinkId = new Guid("506ea877-250c-4a45-a38b-91294a3281eb"), Additions = true, Available = true, ImageUrl = "/assets/Images/Cappuccino.jpg", drinkName = "Cappuccino" },
                        new { DrinkId = new Guid("bccedb02-9039-46f5-8673-d75e0335e513"), Additions = true, Available = true, ImageUrl = "/assets/Images/Latte Macchiato.jpg", drinkName = "Latte Macchiato" },
                        new { DrinkId = new Guid("de0d9cbd-c8c9-4185-8e70-d5b7d3a482fa"), Additions = true, Available = true, ImageUrl = "/assets/Images/Espresso.png", drinkName = "Espresso" },
                        new { DrinkId = new Guid("fb67d366-82db-488f-8a51-8737f3e731bf"), Additions = true, Available = true, ImageUrl = "/assets/Images/Thee.jpg", drinkName = "Thee" },
                        new { DrinkId = new Guid("d301fd10-4303-4e47-b9e1-fd319e322fe6"), Additions = false, Available = true, ImageUrl = "/assets/Images/Water.jpg", drinkName = "Water" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.DrinkPreference", b =>
                {
                    b.Property<Guid>("Preferenceid")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DrinkId");

                    b.Property<int>("Milk");

                    b.Property<int>("Sugar");

                    b.Property<Guid>("UserId");

                    b.HasKey("Preferenceid");

                    b.HasIndex("DrinkId");

                    b.HasIndex("UserId");

                    b.ToTable("DrinkPreference");
                });

            modelBuilder.Entity("CoffeeAPI.Models.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GroupName")
                        .IsRequired();

                    b.HasKey("GroupId");

                    b.ToTable("Groups");

                    b.HasData(
                        new { GroupId = new Guid("89fa258f-8154-452b-ba03-9ff3ccbaa3f9"), GroupName = "The addicts" },
                        new { GroupId = new Guid("bcc3dc47-c860-4db4-80b6-baba99a2a495"), GroupName = "The most drinkers" },
                        new { GroupId = new Guid("f974747e-41dc-45c1-96ed-1a8b253c33f4"), GroupName = "Frequently need coffee" },
                        new { GroupId = new Guid("28d6197e-1c64-4e68-94ac-5febb9cdee9d"), GroupName = "Thee pussy's" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.Login", b =>
                {
                    b.Property<Guid>("LoginId")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<Guid?>("UserId");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("LoginId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Logins");

                    b.HasData(
                        new { LoginId = new Guid("f880e915-a424-4a78-b3dd-0725eaf04641"), PasswordHash = new byte[] { 82, 112, 224, 48, 144, 146, 12, 82, 242, 42, 64, 100, 6, 55, 38, 122, 25, 76, 39, 42, 202, 108, 237, 49, 218, 116, 19, 55, 137, 112, 197, 145 }, PasswordSalt = new byte[] { 31, 178, 104, 236, 7, 49, 233, 89, 38, 96, 138, 154, 114, 165, 104, 91, 3, 37, 195, 123, 171, 226, 181, 83, 161, 70, 58, 243, 244, 245, 81, 36 }, UserId = new Guid("a69a80fa-1542-4c75-93a9-2d3e30708e1e"), UserName = "admin" },
                        new { LoginId = new Guid("bfa3dfe1-433e-4880-92fe-470ed565a122"), PasswordHash = new byte[] { 140, 181, 5, 42, 89, 235, 80, 125, 246, 146, 20, 185, 43, 57, 128, 179, 132, 214, 228, 91, 137, 0, 43, 94, 227, 40, 211, 154, 62, 150, 223, 192 }, PasswordSalt = new byte[] { 116, 6, 18, 178, 244, 198, 137, 218, 71, 190, 12, 241, 45, 174, 6, 152, 20, 164, 132, 89, 211, 255, 10, 153, 56, 134, 162, 32, 4, 170, 18, 215 }, UserId = new Guid("bcd4194d-fce0-438c-8e05-99dc127049ae"), UserName = "jaap" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.OrderLine", b =>
                {
                    b.Property<Guid>("OrderLineId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<Guid>("CustomerUserId");

                    b.Property<Guid>("DrinkId");

                    b.Property<DateTime>("GetTime");

                    b.Property<int>("Milk");

                    b.Property<Guid?>("OrderStatusId");

                    b.Property<DateTime>("OrderTime");

                    b.Property<Guid?>("ServerUserId");

                    b.Property<int>("Sugar");

                    b.HasKey("OrderLineId");

                    b.HasIndex("CustomerUserId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("ServerUserId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("CoffeeAPI.Models.OrderStatus", b =>
                {
                    b.Property<Guid>("OrderStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StatusName")
                        .IsRequired();

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new { OrderStatusId = new Guid("dd154c53-e21f-4985-8c32-8d49e770c3e0"), StatusName = "Ordered" },
                        new { OrderStatusId = new Guid("cf491f0a-e431-4f01-a901-089c7c626998"), StatusName = "Finished" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleName")
                        .IsRequired();

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new { RoleId = new Guid("42532ca9-3bbc-4117-9da8-aad8a4f0fefc"), RoleName = "User" },
                        new { RoleId = new Guid("6f35b77d-6f3a-4d95-9715-ee8021b1f8b3"), RoleName = "Manager" },
                        new { RoleId = new Guid("07c754fa-5b86-4aa5-a5bb-6a32586da063"), RoleName = "Admin" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<Guid?>("PrefrenceDrinkId");

                    b.HasKey("UserId");

                    b.HasIndex("PrefrenceDrinkId");

                    b.ToTable("Users");

                    b.HasData(
                        new { UserId = new Guid("a69a80fa-1542-4c75-93a9-2d3e30708e1e"), Active = true, FirstName = "Super", LastName = "Admin" },
                        new { UserId = new Guid("bcd4194d-fce0-438c-8e05-99dc127049ae"), Active = true, FirstName = "Jaap", LastName = "Schaap" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.UserGroup", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GroupId");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("CoffeeAPI.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { UserId = new Guid("a69a80fa-1542-4c75-93a9-2d3e30708e1e"), RoleId = new Guid("42532ca9-3bbc-4117-9da8-aad8a4f0fefc") },
                        new { UserId = new Guid("a69a80fa-1542-4c75-93a9-2d3e30708e1e"), RoleId = new Guid("07c754fa-5b86-4aa5-a5bb-6a32586da063") },
                        new { UserId = new Guid("bcd4194d-fce0-438c-8e05-99dc127049ae"), RoleId = new Guid("42532ca9-3bbc-4117-9da8-aad8a4f0fefc") },
                        new { UserId = new Guid("bcd4194d-fce0-438c-8e05-99dc127049ae"), RoleId = new Guid("6f35b77d-6f3a-4d95-9715-ee8021b1f8b3") }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.DrinkPreference", b =>
                {
                    b.HasOne("CoffeeAPI.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoffeeAPI.Models.Login", b =>
                {
                    b.HasOne("CoffeeAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CoffeeAPI.Models.OrderLine", b =>
                {
                    b.HasOne("CoffeeAPI.Models.User", "Customer")
                        .WithMany("OrderLinesOrdered")
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.Drink", "Drink")
                        .WithMany("OrderLines")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.OrderStatus", "OrderStatus")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("CoffeeAPI.Models.User", "Server")
                        .WithMany("OrderLinesServed")
                        .HasForeignKey("ServerUserId");
                });

            modelBuilder.Entity("CoffeeAPI.Models.User", b =>
                {
                    b.HasOne("CoffeeAPI.Models.Drink", "Prefrence")
                        .WithMany()
                        .HasForeignKey("PrefrenceDrinkId");
                });

            modelBuilder.Entity("CoffeeAPI.Models.UserGroup", b =>
                {
                    b.HasOne("CoffeeAPI.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoffeeAPI.Models.UserRole", b =>
                {
                    b.HasOne("CoffeeAPI.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
