// <auto-generated />
using System;
using CoffeeAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoffeeAPI.Migrations
{
    [DbContext(typeof(CoffeeContext))]
    [Migration("20181115173831_PreferenceId")]
    partial class PreferenceId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoffeeAPI.Models.Drink", b =>
                {
                    b.Property<Guid>("DrinkId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Additions");

                    b.Property<bool>("Available");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("drinkName")
                        .IsRequired();

                    b.HasKey("DrinkId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new { DrinkId = new Guid("8d41470c-f1d9-40d6-b8d2-7ba75010a756"), Additions = true, Available = true, ImageUrl = "/assets/Images/Koffie.jpg", drinkName = "Koffie" },
                        new { DrinkId = new Guid("40002e86-7aba-4f7d-b5c7-8e89091535d3"), Additions = true, Available = true, ImageUrl = "/assets/Images/Cappuccino.jpg", drinkName = "Cappuccino" },
                        new { DrinkId = new Guid("cade8e76-7caa-4285-b2bb-a94b16aa6dac"), Additions = true, Available = true, ImageUrl = "/assets/Images/Latte Macchiato.jpg", drinkName = "Latte Macchiato" },
                        new { DrinkId = new Guid("35720804-1514-4f2d-946f-9ace707a2a80"), Additions = true, Available = true, ImageUrl = "/assets/Images/Espresso.png", drinkName = "Espresso" },
                        new { DrinkId = new Guid("92686ab2-9293-4eea-9e38-74386da0f57a"), Additions = true, Available = true, ImageUrl = "/assets/Images/Thee.jpg", drinkName = "Thee" },
                        new { DrinkId = new Guid("c01f63ca-eb8f-486d-adcd-9566969cf4c2"), Additions = false, Available = true, ImageUrl = "/assets/Images/Water.jpg", drinkName = "Water" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.DrinkPreference", b =>
                {
                    b.Property<Guid>("PreferenceId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DrinkId");

                    b.Property<int>("Milk");

                    b.Property<int>("Sugar");

                    b.Property<Guid>("UserId");

                    b.HasKey("PreferenceId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("UserId");

                    b.ToTable("DrinkPreference");
                });

            modelBuilder.Entity("CoffeeAPI.Models.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GroupName")
                        .IsRequired();

                    b.HasKey("GroupId");

                    b.ToTable("Groups");

                    b.HasData(
                        new { GroupId = new Guid("089c46c4-2cda-4b87-8102-23cef8d10398"), GroupName = "The addicts" },
                        new { GroupId = new Guid("3bbcde49-53c1-4dc8-b9e5-043a7c5b7816"), GroupName = "The most drinkers" },
                        new { GroupId = new Guid("9ad8cf1d-a2db-4694-a58d-d78258dc6956"), GroupName = "Frequently need coffee" },
                        new { GroupId = new Guid("db78a2e9-e0ef-4c53-997f-e4dfc4c956d4"), GroupName = "Thee pussy's" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.Login", b =>
                {
                    b.Property<Guid>("LoginId")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<Guid?>("UserId");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("LoginId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Logins");

                    b.HasData(
                        new { LoginId = new Guid("3a7c6d7d-a296-4807-a04f-e7fb3772f98b"), PasswordHash = new byte[] { 137, 52, 25, 107, 255, 151, 43, 217, 149, 62, 114, 169, 157, 188, 144, 255, 230, 32, 108, 220, 108, 229, 111, 61, 248, 95, 208, 116, 237, 234, 185, 229 }, PasswordSalt = new byte[] { 155, 243, 11, 91, 102, 107, 111, 138, 196, 111, 182, 215, 216, 167, 29, 243, 255, 185, 246, 176, 80, 251, 61, 96, 72, 187, 28, 224, 19, 179, 164, 23 }, UserId = new Guid("c185bda6-20b1-4a5a-b1f3-0d2aa90bb7a6"), UserName = "admin" },
                        new { LoginId = new Guid("22ac6681-af69-4126-93c7-0422acfd70af"), PasswordHash = new byte[] { 33, 141, 7, 120, 246, 234, 229, 138, 131, 166, 199, 107, 252, 209, 13, 230, 77, 16, 119, 156, 32, 119, 156, 69, 0, 195, 90, 76, 153, 221, 236, 105 }, PasswordSalt = new byte[] { 214, 199, 170, 30, 220, 111, 137, 219, 122, 78, 35, 233, 29, 68, 104, 255, 11, 116, 88, 202, 60, 187, 9, 209, 80, 70, 117, 76, 93, 107, 255, 65 }, UserId = new Guid("adbb0506-b882-4670-8966-4ebf573fa439"), UserName = "jaap" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.OrderLine", b =>
                {
                    b.Property<Guid>("OrderLineId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<Guid>("CustomerUserId");

                    b.Property<Guid>("DrinkId");

                    b.Property<DateTime>("GetTime");

                    b.Property<int>("Milk");

                    b.Property<Guid?>("OrderStatusId");

                    b.Property<DateTime>("OrderTime");

                    b.Property<Guid?>("ServerUserId");

                    b.Property<int>("Sugar");

                    b.HasKey("OrderLineId");

                    b.HasIndex("CustomerUserId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("ServerUserId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("CoffeeAPI.Models.OrderStatus", b =>
                {
                    b.Property<Guid>("OrderStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StatusName")
                        .IsRequired();

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new { OrderStatusId = new Guid("1f55855f-4b25-4e0f-9013-aa96da3fc744"), StatusName = "Ordered" },
                        new { OrderStatusId = new Guid("1279dd57-fc24-4141-a567-5ee77c137612"), StatusName = "Finished" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleName")
                        .IsRequired();

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new { RoleId = new Guid("6528e3e6-86f8-4149-af9a-d9496059fc2e"), RoleName = "User" },
                        new { RoleId = new Guid("04194dbb-3267-4ab3-bc51-33b09ed5ba76"), RoleName = "Manager" },
                        new { RoleId = new Guid("81e7dd63-cdb7-4fb2-82ae-98675ed5ed6c"), RoleName = "Admin" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<Guid?>("PrefrenceDrinkId");

                    b.HasKey("UserId");

                    b.HasIndex("PrefrenceDrinkId");

                    b.ToTable("Users");

                    b.HasData(
                        new { UserId = new Guid("c185bda6-20b1-4a5a-b1f3-0d2aa90bb7a6"), Active = true, FirstName = "Super", LastName = "Admin" },
                        new { UserId = new Guid("adbb0506-b882-4670-8966-4ebf573fa439"), Active = true, FirstName = "Jaap", LastName = "Schaap" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.UserGroup", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GroupId");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("CoffeeAPI.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { UserId = new Guid("c185bda6-20b1-4a5a-b1f3-0d2aa90bb7a6"), RoleId = new Guid("6528e3e6-86f8-4149-af9a-d9496059fc2e") },
                        new { UserId = new Guid("c185bda6-20b1-4a5a-b1f3-0d2aa90bb7a6"), RoleId = new Guid("81e7dd63-cdb7-4fb2-82ae-98675ed5ed6c") },
                        new { UserId = new Guid("adbb0506-b882-4670-8966-4ebf573fa439"), RoleId = new Guid("6528e3e6-86f8-4149-af9a-d9496059fc2e") },
                        new { UserId = new Guid("adbb0506-b882-4670-8966-4ebf573fa439"), RoleId = new Guid("04194dbb-3267-4ab3-bc51-33b09ed5ba76") }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.DrinkPreference", b =>
                {
                    b.HasOne("CoffeeAPI.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoffeeAPI.Models.Login", b =>
                {
                    b.HasOne("CoffeeAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CoffeeAPI.Models.OrderLine", b =>
                {
                    b.HasOne("CoffeeAPI.Models.User", "Customer")
                        .WithMany("OrderLinesOrdered")
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.Drink", "Drink")
                        .WithMany("OrderLines")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.OrderStatus", "OrderStatus")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("CoffeeAPI.Models.User", "Server")
                        .WithMany("OrderLinesServed")
                        .HasForeignKey("ServerUserId");
                });

            modelBuilder.Entity("CoffeeAPI.Models.User", b =>
                {
                    b.HasOne("CoffeeAPI.Models.Drink", "Prefrence")
                        .WithMany()
                        .HasForeignKey("PrefrenceDrinkId");
                });

            modelBuilder.Entity("CoffeeAPI.Models.UserGroup", b =>
                {
                    b.HasOne("CoffeeAPI.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoffeeAPI.Models.UserRole", b =>
                {
                    b.HasOne("CoffeeAPI.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
