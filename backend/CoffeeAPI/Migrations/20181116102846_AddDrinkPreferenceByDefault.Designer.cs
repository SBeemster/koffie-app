// <auto-generated />
using System;
using CoffeeAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoffeeAPI.Migrations
{
    [DbContext(typeof(CoffeeContext))]
    [Migration("20181116102846_AddDrinkPreferenceByDefault")]
    partial class AddDrinkPreferenceByDefault
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoffeeAPI.Models.Drink", b =>
                {
                    b.Property<Guid>("DrinkId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Additions");

                    b.Property<bool>("Available");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("drinkName")
                        .IsRequired();

                    b.HasKey("DrinkId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new { DrinkId = new Guid("7addc228-3dee-4ec4-a096-1fd8a04daab0"), Additions = true, Available = true, ImageUrl = "/assets/Images/Koffie.jpg", drinkName = "Koffie" },
                        new { DrinkId = new Guid("00520956-7a40-4d59-bbbd-e9dddead4f5c"), Additions = true, Available = true, ImageUrl = "/assets/Images/Cappuccino.jpg", drinkName = "Cappuccino" },
                        new { DrinkId = new Guid("d7410286-1576-444c-96c9-0c9ef75cf671"), Additions = true, Available = true, ImageUrl = "/assets/Images/Latte Macchiato.jpg", drinkName = "Latte Macchiato" },
                        new { DrinkId = new Guid("9e777953-33ea-459b-8f5c-145feb3067eb"), Additions = true, Available = true, ImageUrl = "/assets/Images/Espresso.png", drinkName = "Espresso" },
                        new { DrinkId = new Guid("cc6d6cba-1c32-410b-9688-74b4a2f0bd9b"), Additions = true, Available = true, ImageUrl = "/assets/Images/Thee.jpg", drinkName = "Thee" },
                        new { DrinkId = new Guid("1d534c5d-9a9c-4b5b-aa23-c5245f265b2f"), Additions = false, Available = true, ImageUrl = "/assets/Images/Water.jpg", drinkName = "Water" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.DrinkPreference", b =>
                {
                    b.Property<Guid>("PreferenceId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DrinkId");

                    b.Property<int?>("Milk");

                    b.Property<int?>("Sugar");

                    b.Property<Guid>("UserId");

                    b.HasKey("PreferenceId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("UserId");

                    b.ToTable("DrinkPreference");

                    b.HasData(
                        new { PreferenceId = new Guid("1bc31ffb-fecb-41ee-a260-6300825fd98d"), UserId = new Guid("f4f8d750-4841-4844-9ef6-bb620b6b4d1d") },
                        new { PreferenceId = new Guid("2f7ee6b9-4a20-4655-9d57-63bc3ba47110"), UserId = new Guid("4a13b7ef-d77b-478a-bcbe-26182b979e9d") }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GroupName")
                        .IsRequired();

                    b.HasKey("GroupId");

                    b.ToTable("Groups");

                    b.HasData(
                        new { GroupId = new Guid("4c184eea-bfac-44fd-9002-72833e8e7d52"), GroupName = "The addicts" },
                        new { GroupId = new Guid("e364a8fa-268d-4151-ac82-5e06c22803fe"), GroupName = "The most drinkers" },
                        new { GroupId = new Guid("46d5dc88-3088-4dc5-8595-3566c26a1953"), GroupName = "Frequently need coffee" },
                        new { GroupId = new Guid("31dbeaf0-c882-415d-b7b8-a2cd4797cef9"), GroupName = "Thee pussy's" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.Login", b =>
                {
                    b.Property<Guid>("LoginId")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<Guid?>("UserId");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("LoginId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Logins");

                    b.HasData(
                        new { LoginId = new Guid("04c1e01f-d8be-471e-9ddb-83a9c1cb70e1"), PasswordHash = new byte[] { 103, 197, 247, 239, 37, 239, 209, 225, 149, 180, 13, 107, 149, 169, 96, 249, 9, 221, 196, 147, 28, 176, 127, 22, 134, 45, 168, 246, 103, 105, 229, 249 }, PasswordSalt = new byte[] { 63, 22, 76, 201, 116, 48, 234, 233, 32, 193, 89, 59, 10, 133, 248, 215, 227, 247, 14, 102, 214, 33, 221, 39, 173, 132, 88, 69, 86, 193, 178, 170 }, UserId = new Guid("f4f8d750-4841-4844-9ef6-bb620b6b4d1d"), UserName = "admin" },
                        new { LoginId = new Guid("8d721acc-6716-40b3-bf4d-bfe32c95f8d5"), PasswordHash = new byte[] { 245, 1, 19, 213, 190, 253, 45, 202, 27, 229, 111, 203, 253, 1, 174, 182, 6, 99, 140, 235, 76, 49, 97, 37, 216, 1, 146, 47, 53, 221, 163, 198 }, PasswordSalt = new byte[] { 87, 77, 233, 41, 243, 81, 13, 202, 187, 15, 163, 246, 66, 123, 247, 142, 107, 188, 6, 11, 115, 148, 171, 4, 114, 180, 173, 74, 67, 148, 220, 46 }, UserId = new Guid("4a13b7ef-d77b-478a-bcbe-26182b979e9d"), UserName = "jaap" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.OrderLine", b =>
                {
                    b.Property<Guid>("OrderLineId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<Guid>("CustomerUserId");

                    b.Property<Guid>("DrinkId");

                    b.Property<DateTime>("GetTime");

                    b.Property<int>("Milk");

                    b.Property<Guid?>("OrderStatusId");

                    b.Property<DateTime>("OrderTime");

                    b.Property<Guid?>("ServerUserId");

                    b.Property<int>("Sugar");

                    b.HasKey("OrderLineId");

                    b.HasIndex("CustomerUserId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("ServerUserId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("CoffeeAPI.Models.OrderStatus", b =>
                {
                    b.Property<Guid>("OrderStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StatusName")
                        .IsRequired();

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new { OrderStatusId = new Guid("d50513e4-952a-475b-bba1-f2ba0bc16a0e"), StatusName = "Ordered" },
                        new { OrderStatusId = new Guid("6c6f2e99-8bca-4ca7-93a5-cd61e0208578"), StatusName = "Finished" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleName")
                        .IsRequired();

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new { RoleId = new Guid("04b8db6c-40fb-4297-8392-1f4cfd890b66"), RoleName = "User" },
                        new { RoleId = new Guid("ed3f0e85-7d09-4940-b059-992098f69603"), RoleName = "Manager" },
                        new { RoleId = new Guid("5992848d-a6b9-42a1-962a-229598c03d81"), RoleName = "Admin" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<Guid?>("PrefrenceDrinkId");

                    b.HasKey("UserId");

                    b.HasIndex("PrefrenceDrinkId");

                    b.ToTable("Users");

                    b.HasData(
                        new { UserId = new Guid("f4f8d750-4841-4844-9ef6-bb620b6b4d1d"), Active = true, FirstName = "Super", LastName = "Admin" },
                        new { UserId = new Guid("4a13b7ef-d77b-478a-bcbe-26182b979e9d"), Active = true, FirstName = "Jaap", LastName = "Schaap" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.UserGroup", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GroupId");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("CoffeeAPI.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { UserId = new Guid("f4f8d750-4841-4844-9ef6-bb620b6b4d1d"), RoleId = new Guid("04b8db6c-40fb-4297-8392-1f4cfd890b66") },
                        new { UserId = new Guid("f4f8d750-4841-4844-9ef6-bb620b6b4d1d"), RoleId = new Guid("5992848d-a6b9-42a1-962a-229598c03d81") },
                        new { UserId = new Guid("4a13b7ef-d77b-478a-bcbe-26182b979e9d"), RoleId = new Guid("04b8db6c-40fb-4297-8392-1f4cfd890b66") },
                        new { UserId = new Guid("4a13b7ef-d77b-478a-bcbe-26182b979e9d"), RoleId = new Guid("ed3f0e85-7d09-4940-b059-992098f69603") }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.DrinkPreference", b =>
                {
                    b.HasOne("CoffeeAPI.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId");

                    b.HasOne("CoffeeAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoffeeAPI.Models.Login", b =>
                {
                    b.HasOne("CoffeeAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CoffeeAPI.Models.OrderLine", b =>
                {
                    b.HasOne("CoffeeAPI.Models.User", "Customer")
                        .WithMany("OrderLinesOrdered")
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.Drink", "Drink")
                        .WithMany("OrderLines")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.OrderStatus", "OrderStatus")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("CoffeeAPI.Models.User", "Server")
                        .WithMany("OrderLinesServed")
                        .HasForeignKey("ServerUserId");
                });

            modelBuilder.Entity("CoffeeAPI.Models.User", b =>
                {
                    b.HasOne("CoffeeAPI.Models.Drink", "Prefrence")
                        .WithMany()
                        .HasForeignKey("PrefrenceDrinkId");
                });

            modelBuilder.Entity("CoffeeAPI.Models.UserGroup", b =>
                {
                    b.HasOne("CoffeeAPI.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoffeeAPI.Models.UserRole", b =>
                {
                    b.HasOne("CoffeeAPI.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
