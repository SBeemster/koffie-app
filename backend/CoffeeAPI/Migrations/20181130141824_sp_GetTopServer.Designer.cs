// <auto-generated />
using System;
using CoffeeAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoffeeAPI.Migrations
{
    [DbContext(typeof(CoffeeContext))]
    [Migration("20181130141824_sp_GetTopServer")]
    partial class sp_GetTopServer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoffeeAPI.Models.Drink", b =>
                {
                    b.Property<Guid>("DrinkId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Additions");

                    b.Property<bool>("Available");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("drinkName")
                        .IsRequired();

                    b.HasKey("DrinkId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new { DrinkId = new Guid("2a370079-b47c-4b42-9281-a6cbea366ed4"), Additions = true, Available = true, ImageUrl = "/assets/Images/Koffie.jpg", drinkName = "Koffie" },
                        new { DrinkId = new Guid("514397a4-3bdf-40b5-a1c9-5a2951bd5556"), Additions = true, Available = true, ImageUrl = "/assets/Images/Cappuccino.jpg", drinkName = "Cappuccino" },
                        new { DrinkId = new Guid("02be2d9e-55b9-4e69-962a-07611989dfdc"), Additions = true, Available = true, ImageUrl = "/assets/Images/Latte Macchiato.jpg", drinkName = "Latte Macchiato" },
                        new { DrinkId = new Guid("c321094d-bffd-49f7-bdff-23b1892972f9"), Additions = true, Available = true, ImageUrl = "/assets/Images/Espresso.png", drinkName = "Espresso" },
                        new { DrinkId = new Guid("fcce54d6-69ab-4e67-94e6-84fcdfee6556"), Additions = true, Available = true, ImageUrl = "/assets/Images/Thee.jpg", drinkName = "Thee" },
                        new { DrinkId = new Guid("8a6163b9-06ca-456d-bbaf-b05d6a48ef72"), Additions = false, Available = true, ImageUrl = "/assets/Images/Water.jpg", drinkName = "Water" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.DrinkPreference", b =>
                {
                    b.Property<Guid>("PreferenceId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DrinkId");

                    b.Property<int?>("Milk");

                    b.Property<int?>("Sugar");

                    b.Property<Guid>("UserId");

                    b.HasKey("PreferenceId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("UserId");

                    b.ToTable("DrinkPreference");

                    b.HasData(
                        new { PreferenceId = new Guid("0ad7ca62-073c-4d39-aa55-6eaa896cfbca"), UserId = new Guid("fc5c5a41-4681-4118-a9e8-8b18143acf49") },
                        new { PreferenceId = new Guid("d10414ef-92a9-469e-9807-51695ce79d6d"), UserId = new Guid("eac6b8ce-23f7-4096-a798-3815eabe9b6a") }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GroupName")
                        .IsRequired();

                    b.HasKey("GroupId");

                    b.ToTable("Groups");

                    b.HasData(
                        new { GroupId = new Guid("f084a20d-dc4f-4920-9b62-ec8f0376ab0f"), GroupName = "The addicts" },
                        new { GroupId = new Guid("335caa1c-d99f-4883-ba4e-502a3b2d0386"), GroupName = "The most drinkers" },
                        new { GroupId = new Guid("dc93a374-1458-4137-bf7e-f52a0f61b389"), GroupName = "Frequently need coffee" },
                        new { GroupId = new Guid("2fbd6a81-2e30-4b95-a0ca-38bd594c0cc1"), GroupName = "Thee pussy's" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.Login", b =>
                {
                    b.Property<Guid>("LoginId")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<Guid?>("UserId");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("LoginId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Logins");

                    b.HasData(
                        new { LoginId = new Guid("f8cf56d1-7524-4ae6-bf83-9b04be495a3b"), PasswordHash = new byte[] { 250, 142, 53, 183, 167, 108, 209, 206, 58, 34, 19, 179, 246, 124, 23, 100, 77, 149, 240, 49, 120, 214, 115, 148, 220, 47, 8, 233, 200, 169, 179, 251 }, PasswordSalt = new byte[] { 159, 161, 140, 62, 176, 63, 102, 12, 182, 169, 166, 152, 72, 136, 67, 175, 33, 41, 255, 198, 24, 166, 126, 104, 164, 133, 233, 86, 7, 119, 163, 25 }, UserId = new Guid("fc5c5a41-4681-4118-a9e8-8b18143acf49"), UserName = "admin" },
                        new { LoginId = new Guid("7b245232-5d92-4c47-854a-6c978024bf08"), PasswordHash = new byte[] { 75, 74, 128, 142, 6, 154, 221, 163, 157, 90, 151, 48, 167, 39, 229, 51, 221, 122, 147, 125, 62, 194, 126, 210, 254, 94, 138, 23, 186, 200, 61, 32 }, PasswordSalt = new byte[] { 78, 4, 88, 57, 182, 30, 121, 220, 100, 161, 207, 65, 174, 82, 22, 171, 78, 157, 99, 71, 125, 237, 62, 45, 83, 147, 76, 172, 142, 169, 3, 206 }, UserId = new Guid("eac6b8ce-23f7-4096-a798-3815eabe9b6a"), UserName = "jaap" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.OrderLine", b =>
                {
                    b.Property<Guid>("OrderLineId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<Guid>("CustomerUserId");

                    b.Property<Guid>("DrinkId");

                    b.Property<DateTime>("GetTime");

                    b.Property<int>("Milk");

                    b.Property<Guid?>("OrderStatusId");

                    b.Property<DateTime>("OrderTime");

                    b.Property<Guid?>("ServerUserId");

                    b.Property<int>("Sugar");

                    b.HasKey("OrderLineId");

                    b.HasIndex("CustomerUserId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("ServerUserId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("CoffeeAPI.Models.OrderStatus", b =>
                {
                    b.Property<Guid>("OrderStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StatusName")
                        .IsRequired();

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new { OrderStatusId = new Guid("b9da2176-1d7a-4312-9ae5-fb5ba3b44a26"), StatusName = "Ordered" },
                        new { OrderStatusId = new Guid("9f8175c2-b69f-40c3-9de3-cdb4349cd5fb"), StatusName = "Finished" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleName")
                        .IsRequired();

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new { RoleId = new Guid("5db7d90e-4fb7-4290-9993-e1536c3e7552"), RoleName = "User" },
                        new { RoleId = new Guid("d855d269-f1fd-425a-a25c-7e56e3342399"), RoleName = "Manager" },
                        new { RoleId = new Guid("58b1aeb3-38d4-485d-b5f9-48fdb3b560f7"), RoleName = "Admin" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<Guid?>("PrefrenceDrinkId");

                    b.HasKey("UserId");

                    b.HasIndex("PrefrenceDrinkId");

                    b.ToTable("Users");

                    b.HasData(
                        new { UserId = new Guid("fc5c5a41-4681-4118-a9e8-8b18143acf49"), Active = true, FirstName = "Super", LastName = "Admin" },
                        new { UserId = new Guid("eac6b8ce-23f7-4096-a798-3815eabe9b6a"), Active = true, FirstName = "Jaap", LastName = "Schaap" }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.UserGroup", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GroupId");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("CoffeeAPI.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { UserId = new Guid("fc5c5a41-4681-4118-a9e8-8b18143acf49"), RoleId = new Guid("5db7d90e-4fb7-4290-9993-e1536c3e7552") },
                        new { UserId = new Guid("fc5c5a41-4681-4118-a9e8-8b18143acf49"), RoleId = new Guid("58b1aeb3-38d4-485d-b5f9-48fdb3b560f7") },
                        new { UserId = new Guid("eac6b8ce-23f7-4096-a798-3815eabe9b6a"), RoleId = new Guid("5db7d90e-4fb7-4290-9993-e1536c3e7552") },
                        new { UserId = new Guid("eac6b8ce-23f7-4096-a798-3815eabe9b6a"), RoleId = new Guid("d855d269-f1fd-425a-a25c-7e56e3342399") }
                    );
                });

            modelBuilder.Entity("CoffeeAPI.Models.DrinkPreference", b =>
                {
                    b.HasOne("CoffeeAPI.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId");

                    b.HasOne("CoffeeAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoffeeAPI.Models.Login", b =>
                {
                    b.HasOne("CoffeeAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CoffeeAPI.Models.OrderLine", b =>
                {
                    b.HasOne("CoffeeAPI.Models.User", "Customer")
                        .WithMany("OrderLinesOrdered")
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.Drink", "Drink")
                        .WithMany("OrderLines")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.OrderStatus", "OrderStatus")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("CoffeeAPI.Models.User", "Server")
                        .WithMany("OrderLinesServed")
                        .HasForeignKey("ServerUserId");
                });

            modelBuilder.Entity("CoffeeAPI.Models.User", b =>
                {
                    b.HasOne("CoffeeAPI.Models.Drink", "Prefrence")
                        .WithMany()
                        .HasForeignKey("PrefrenceDrinkId");
                });

            modelBuilder.Entity("CoffeeAPI.Models.UserGroup", b =>
                {
                    b.HasOne("CoffeeAPI.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoffeeAPI.Models.UserRole", b =>
                {
                    b.HasOne("CoffeeAPI.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoffeeAPI.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
